use connectedhomeip_sys::*;
use moveit::Emplace;

fn main() {
    chkerr!(unsafe { chip::Platform::MemoryInit(core::ptr::null_mut(), 0) }).unwrap();

    //let mut ce: [u8; 128];

    //MemoryInit_autocxx_wrapper(core::ptr::null_mut(), 0, &mut ce as *mut _ as *mut _);

    //Box::emplace(unsafe { chip::Platform::MemoryInit(core::ptr::null_mut(), "x") });

    //unsafe { chip::Platform::MemoryInit(core::ptr::null_mut(), 0) };
    //unsafe { CHIPPlatformMemoryInit(core::ptr::null_mut(), 0); }

    //println!("Test: {:?}", unsafe { CHIPPlatformMemoryInit(core::ptr::null_mut(), 0) });
}

// # [doc = ""]
// pub unsafe fn MemoryInit (buf : * mut autocxx :: c_void , bufSize : usize) -> impl autocxx :: moveit :: new :: New < Output = root :: chip :: ChipError > {
//     autocxx :: moveit :: new :: by_raw (move | placement_return_type | {
//         let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ;
//         cxxbridge :: MemoryInit_autocxx_wrapper (buf , bufSize , placement_return_type)
//     })
// }

// # [doc = ""]
// pub unsafe fn MemoryInit_autocxx_wrapper (buf : * mut c_void , bufSize : usize , placement_return_type : * mut ChipError) ;
// # [namespace = "chip"] # [doc = " Return an integer code for the error."] pub fn AsInteger (self : & ChipError) -> u32 ;
//  pub unsafe fn IsSuccess_autocxx_wrapper (error : * mut ChipError) -> bool ; pub fn IsSuccess1_autocxx_wrapper (error : u32) -> bool ; # [namespace = "chip"] pub fn Format (self : & ChipError) -> u32 ; # [namespace = "chip"] # [doc = " Format an @a error as a string for printing."] # [doc = ""] # [doc = " @note"] # [doc = "  Normally, prefer to use Format()"] pub fn AsString (self : & ChipError) -> * const c_char ; # [namespace = "chip"] # [doc = " Test whether @a error belongs to the Range @a range."] pub fn IsRange (self : & ChipError , range : ChipError_Range) -> bool ; # [namespace = "chip"] # [doc = " Get the Range to which the @a error belongs."] pub fn GetRange (self : & ChipError) -> ChipError_Range ; # [namespace = "chip"] # [doc = " Get the encapsulated value of an @a error."] pub fn GetValue (self : & ChipError) -> u32 ; # [namespace = "chip"] # [doc = " Test whether @a error is an SDK error belonging to the SdkPart @a part."] pub fn IsPart (self : & ChipError , part : ChipError_SdkPart) -> bool ; # [namespace = "chip"] # [doc = " Get the SDK code for an SDK error."] pub fn GetSdkCode (self : & ChipError) -> u8 ; # [namespace = "chip"] # [doc = " Test whether @a error is an SDK error representing an Interaction Model"] # [doc = " status.  If it is, it can be converted to/from an interaction model"] # [doc = " StatusIB struct."] pub fn IsIMStatus (self : & ChipError) -> bool ; pub unsafe fn chip_ChipError_new_autocxx_autocxx_wrapper (autocxx_gen_this : * mut ChipError) ; # [doc = " Construct a CHIP_ERROR encapsulating @a value inside the Range @a range."] # [doc = ""] # [doc = " @note"] # [doc = "  The result is valid only if CanEncapsulate() is true."] pub unsafe fn chip_ChipError_new1_autocxx_wrapper (autocxx_gen_this : * mut ChipError , range : ChipError_Range , value : u32) ; pub unsafe fn chip_ChipError_new2_autocxx_wrapper (autocxx_gen_this : * mut ChipError , range : ChipError_Range , value : u32 , file : * const c_char , line : c_uint) ; # [doc = " Construct a CHIP_ERROR for SdkPart @a part with @a code."] # [doc = ""] # [doc = " @note"] # [doc = "  The macro version CHIP_SDK_ERROR checks that the numeric value is constant and well-formed."] pub unsafe fn chip_ChipError_new3_autocxx_wrapper (autocxx_gen_this : * mut ChipError , part : ChipError_SdkPart , code : u8) ; pub unsafe fn chip_ChipError_new4_autocxx_wrapper (autocxx_gen_this : * mut ChipError , part : ChipError_SdkPart , code : u8 , file : * const c_char , line : c_uint) ; # [doc = " Construct a CHIP_ERROR from the underlying storage type."] # [doc = ""] # [doc = " @note"] # [doc = "  This is intended to be used only in foreign function interfaces."] pub unsafe fn new5_autocxx_wrapper (autocxx_gen_this : * mut ChipError , error : u32) ; pub unsafe fn new6_autocxx_wrapper (autocxx_gen_this : * mut ChipError , error : u32 , file : * const c_char , line : c_uint) ; pub unsafe fn CHIPPlatformMemoryInit (buf : * mut c_void , bufSize : usize) -> c_int ; # [doc = "Synthesized move constructor."] pub unsafe fn chip_ChipError_new_synthetic_move_ctor_0xe771be6bd747b98a_autocxx_wrapper (autocxx_gen_this : * mut ChipError , other : * mut ChipError) ; # [doc = "Synthesized copy constructor."] pub unsafe fn chip_ChipError_new_synthetic_const_copy_ctor_0xe771be6bd747b98a_autocxx_wrapper (autocxx_gen_this : * mut ChipError , other : & ChipError) ; # [doc = "Synthesized destructor."] pub unsafe fn ChipError_synthetic_destructor_0xe771be6bd747b98a_autocxx_wrapper (autocxx_gen_this : * mut ChipError) ; # [namespace = "chip::DeviceLayer"] # [doc = " Defines the delegate class of Platform Manager to notify platform updates."] type PlatformManagerDelegate = super :: bindgen :: root :: chip :: DeviceLayer :: PlatformManagerDelegate ; # [namespace = "chip::DeviceLayer"] # [doc = " Represents a chip Device Layer event."] type ChipDeviceEvent = super :: bindgen :: root :: chip :: DeviceLayer :: ChipDeviceEvent ; # [namespace = "chip::ChipError"] # [cxx_name = "Range"] # [doc = " Top-level error classification."] # [doc = ""] # [doc = " Every error belongs to a Range and has an integral Value whose meaning depends on the Range."] # [doc = " All native CHIP SDK errors belong to the kSDK range. Other ranges are used to encapsulate error"] # [doc = " codes from other subsystems (e.g. platform or library) used by the CHIP SDK."] type ChipError_Range = super :: bindgen :: root :: chip :: ChipError_Range ; # [namespace = "chip::ChipError"] # [cxx_name = "SdkPart"] # [doc = " Secondary classification of CHIP SDK errors (Range::kSDK)."] type ChipError_SdkPart = super :: bindgen :: root :: chip :: ChipError_SdkPart ; pub unsafe fn PlatformManagerDelegate_alloc_autocxx_wrapper () -> * mut PlatformManagerDelegate ; pub unsafe fn PlatformManagerDelegate_free_autocxx_wrapper (arg0 : * mut PlatformManagerDelegate) ; # [doc = "Synthesized copy constructor."] pub unsafe fn chip_DeviceLayer_PlatformManagerDelegate_new_synthetic_const_copy_ctor_0xe771be6bd747b98a_autocxx_wrapper (autocxx_gen_this : * mut PlatformManagerDelegate , other : & PlatformManagerDelegate) ; pub unsafe fn ChipDeviceEvent_alloc_autocxx_wrapper () -> * mut ChipDeviceEvent ; pub unsafe fn ChipDeviceEvent_free_autocxx_wrapper (arg0 : * mut ChipDeviceEvent) ; # [doc = "Synthesized move constructor."] pub unsafe fn chip_DeviceLayer_ChipDeviceEvent_new_synthetic_move_ctor_0xe771be6bd747b98a_autocxx_wrapper (autocxx_gen_this : * mut ChipDeviceEvent , other : * mut ChipDeviceEvent) ; # [doc = "Synthesized copy constructor."] pub unsafe fn chip_DeviceLayer_ChipDeviceEvent_new_synthetic_const_copy_ctor_0xe771be6bd747b98a_autocxx_wrapper (autocxx_gen_this : * mut ChipDeviceEvent , other : & ChipDeviceEvent) ; type c_void = autocxx :: c_void ; type c_uint = autocxx :: c_uint ; type c_int = autocxx :: c_int ; include ! ("util.h") ; include ! ("lib/core/CHIPError.h") ; include ! ("lib/support/CHIPPlatformMemory.h") ; include ! ("platform/PlatformManager.h") ; include ! ("autocxxgen_ffi.h") ; } extern "Rust" { } } # [allow (unused_imports)] use bindgen :: root ; pub use cxxbridge :: autocxx_make_string_0xe771be6bd747b98a as make_string ; pub use cxxbridge :: CHIPPlatformMemoryInit ; pub use bindgen :: root :: CHIP_ERROR ; pub mod chip { pub use super :: bindgen :: root :: chip :: ChipError ; pub use super :: bindgen :: root :: chip :: ChipError_StorageType ; pub use super :: bindgen :: root :: chip :: ChipError_FormatType ; pub use super :: bindgen :: root :: chip :: ChipError_Range ; pub use super :: bindgen :: root :: chip :: ChipError_ValueType ; pub use super :: bindgen :: root :: chip :: ChipError_SdkPart ; pub mod DeviceLayer { pub use super :: super :: bindgen :: root :: chip :: DeviceLayer :: PlatformManager ; pub use super :: super :: bindgen :: root :: chip :: DeviceLayer :: PlatformManagerDelegate ; pub use super :: super :: bindgen :: root :: chip :: DeviceLayer :: ChipDeviceEvent ; } pub mod Platform { pub use super :: super :: bindgen :: root :: chip :: Platform :: MemoryInit ; } } }
